@page "/"
@inject IApiService ApiService
@inject AuthenticationStateProvider AuthenticationStateProvider
@using LakeXplorerBlazor.Data
@using System.Security.Claims
@using CloudinaryDotNet

<PageTitle>LakeXplorer</PageTitle>
<h1>Welcome to LakeXplorer!</h1>

@if (IsAuthenticated)
{
    <p>Hello, @Username! You are logged in.</p>
}
else
{
    <p>You are not logged in. Please <a href="login">log in</a> to explore lakes and sightings.</p>
}

@if (Lakes != null && Lakes.Any())
{
    <h2>Available Lakes</h2>
    <div class="card-container">
        @foreach (var lake in Lakes)
        {
            <div class="card">


                @if (!string.IsNullOrEmpty(lake.ImageUrl))
                {
                    <img src="@lake.ImageUrl" alt="Lake Image" />
                }

                <div class="card-body">
                    <h3 class="card-title">@lake.Name</h3>
                    <p class="card-description">@lake.Description</p>
                    <a href="lake/@lake.Id">View Sightings</a>
                </div>
            </div>
        }
    </div>
}
else
{
    <p>No lakes available. Check back later for updates.</p>
}



    <style>
        .card-container {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
        }

        .card {
            width: 300px;
            background-color: #f5f5f5;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

            .card img {
                width: 100%;
                height: 200px;
                object-fit: cover;
            }

        .card-body {
            padding: 16px;
        }

        .card-title {
            font-size: 20px;
            font-weight: bold;
            margin-bottom: 8px;
        }

        .card-description {
            font-size: 14px;
            color: #555555;
        }
    </style>


@code {
    private Cloudinary cloudinary;
    private bool IsAuthenticated = false;
    private string Username;
    private List<LakeDto> Lakes;
    private int PageSize = 9;
    private int CurrentPage = 1;


    protected override void OnInitialized()
    {
        Account account = new Account(
                "djiicjy1v",
                "417365291149721",
                "g32YBH42nhxvoL4654d9sqBEpKk"
            );

        cloudinary = new Cloudinary(account);
    }
    private void LoadCurrentPage()
    {
        Lakes = Lakes.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();
    }
    private void OnPageChange(int newPage)
    {
        CurrentPage = newPage;
        LoadCurrentPage();
    }

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        IsAuthenticated = authenticationState?.User?.Identity?.IsAuthenticated ?? false;

        if (IsAuthenticated)
        {
            var user = authenticationState.User;
            Username = user.FindFirst(c => c.Type == ClaimTypes.Name)?.Value;
            Lakes = await ApiService.HttpGET<List<LakeDto>>("api/lakes");
        }
    }
}
