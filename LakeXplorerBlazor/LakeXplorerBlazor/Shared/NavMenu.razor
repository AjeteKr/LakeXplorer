<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">LakeXplorerBlazor</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            @{
                if (Authenticated)
                {
                    <NavLink class="nav-link" href="create-lake">
                        <span class="oi oi-droplet" aria-hidden="true"></span> Create new lake
                    </NavLink>

                    <NavLink class="nav-link" href="logout">
                        <span class="oi oi-box" aria-hidden="true"></span> Log out
                    </NavLink>
                }
                else
                {
                    <NavLink class="nav-link" href="login">
                        <span class="oi oi-account-login" aria-hidden="true"></span> Log In
                    </NavLink>

                    <NavLink class="nav-link" href="register">
                        <span class="oi oi-person-new" aria-hidden="true"></span> Register
                    </NavLink>
                }
            }

        </div>
        
        
    </nav>
</div>

@inject AuthenticationStateProvider AuthenticationStateProvider
@code {
    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }



    private bool Authenticated = false;

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        Authenticated = authenticationState?.User?.Identity?.IsAuthenticated == true;
    }
}